import React, { useEffect, useState } from 'react';
import Layout from '../../components/Layout/Layout';
import Title from '../../components/Title/Title';
import Breadcrumbs from '../../components/Breadcrumbs/Breadcrumbs';
import Select from '../../components/Select/Select';
import DateRangePicker from '../../components/DateRangePicker/DateRangePicker';
import { fetchAdminOrders } from '../../lib/api';
import {
    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip,
    BarChart, Bar, PieChart, Pie, Cell, Legend, ResponsiveContainer
} from 'recharts';
import styles from './AdminAnalyticsPage.module.css';

export default function AdminAnalyticsPage() {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [chartType, setChartType] = useState('popularity');
    const [dateRange, setDateRange] = useState({ startDate: '', endDate: '' });
    const [chartData, setChartData] = useState([]);

    useEffect(() => {
        async function loadData() {
            setLoading(true);
            try {
                const data = await fetchAdminOrders();
                setOrders(data.results || []);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', err);
                setOrders([]);
            } finally {
                setLoading(false);
            }
        }
        loadData();
    }, []);

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
    useEffect(() => {
        if (orders.length === 0) return;

        const filtered = orders.filter(o => {
            if (!dateRange.startDate && !dateRange.endDate) return true;
            const date = new Date(o.created_at);
            const start = dateRange.startDate ? new Date(dateRange.startDate) : null;
            const end = dateRange.endDate ? new Date(dateRange.endDate) : null;
            if (start && date < start) return false;
            if (end) {
                const endOfDay = new Date(end);
                endOfDay.setHours(23, 59, 59, 999);
                if (date > endOfDay) return false;
            }
            return true;
        });

        let data = [];

        switch (chartType) {
            // –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –±–ª—é–¥
            case 'popularity': {
                const dishMap = {};
                filtered.forEach(order =>
                    order.items.forEach(i => {
                        dishMap[i.dish.name] = (dishMap[i.dish.name] || 0) + i.quantity;
                    })
                );
                data = Object.entries(dishMap).map(([name, count]) => ({ name, count }));
                break;
            }

            // –ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –¥–µ–Ω—å
            case 'countByDay': {
                const map = {};
                filtered.forEach(order => {
                    const day = new Date(order.created_at).toLocaleDateString();
                    map[day] = (map[day] || 0) + 1;
                });
                data = Object.entries(map).map(([day, count]) => ({ day, count }));
                break;
            }

            // –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –∑–∞ –¥–µ–Ω—å
            case 'avgByDay': {
                const map = {};
                filtered.forEach(order => {
                    const day = new Date(order.created_at).toLocaleDateString();
                    const total = order.items.reduce((sum, i) => sum + Number(i.price) * i.quantity, 0);
                    if (!map[day]) map[day] = { sum: 0, count: 0 };
                    map[day].sum += total;
                    map[day].count += 1;
                });
                data = Object.entries(map).map(([day, { sum, count }]) => ({
                    day,
                    avg: (sum / count).toFixed(2)
                }));
                break;
            }

            // –ü–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
            case 'byTime': {
                const map = { '00‚Äì06': 0, '06‚Äì12': 0, '12‚Äì18': 0, '18‚Äì24': 0 };
                filtered.forEach(order => {
                    const hour = new Date(order.created_at).getHours();
                    if (hour < 6) map['00‚Äì06']++;
                    else if (hour < 12) map['06‚Äì12']++;
                    else if (hour < 18) map['12‚Äì18']++;
                    else map['18‚Äì24']++;
                });
                data = Object.entries(map).map(([range, count]) => ({ range, count }));
                break;
            }

            // –°–∞–º–æ–≤—ã–≤–æ–∑ / –¥–æ—Å—Ç–∞–≤–∫–∞
            case 'pickupVsDelivery': {
                let pickup = 0, delivery = 0;
                filtered.forEach(o => (o.pickup ? pickup++ : delivery++));
                data = [
                    { name: '–°–∞–º–æ–≤—ã–≤–æ–∑', value: pickup },
                    { name: '–î–æ—Å—Ç–∞–≤–∫–∞', value: delivery },
                ];
                break;
            }

            // üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            case 'paymentMethod': {
                const map = {};
                filtered.forEach(order => {
                    const pay = order.payment || 'unknown';
                    map[pay] = (map[pay] || 0) + 1;
                });
                data = Object.entries(map).map(([method, count]) => ({
                    name: method === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' :
                        method === 'card' ? '–ö–∞—Ä—Ç–∞' :
                            method === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    value: count
                }));
                break;
            }

            case 'genderDistribution': {
                const map = { male: 0, female: 0, unknown: 0 };

                filtered.forEach(order => {
                    const raw = (order.user_gender || '').toLowerCase();

                    let gender = 'unknown';
                    if (raw === '–º' || raw === 'male') gender = 'male';
                    else if (raw === '–∂' || raw === 'female') gender = 'female';

                    map[gender]++;
                });

                data = [
                    { name: '–ú—É–∂—á–∏–Ω—ã', value: map.male },
                    { name: '–ñ–µ–Ω—â–∏–Ω—ã', value: map.female },
                    { name: '–ù–µ —É–∫–∞–∑–∞–Ω–æ', value: map.unknown },
                ];
                break;
            }

            // üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            case 'byWeekday': {
                const map = { –ü–Ω: 0, –í—Ç: 0, –°—Ä: 0, –ß—Ç: 0, –ü—Ç: 0, –°–±: 0, –í—Å: 0 };
                filtered.forEach(o => {
                    const day = new Date(o.created_at).getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                    const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
                    map[dayNames[day]]++;
                });
                data = Object.entries(map).map(([day, count]) => ({ day, count }));
                break;
            }

            default:
                data = [];
        }

        setChartData(data);
    }, [chartType, dateRange, orders]);

    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#845EC2'];

    return (
        <Layout>
            <Title>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</Title>
            <Breadcrumbs items={[{ label: '–ì–ª–∞–≤–Ω–∞—è', to: '/admin' }, { label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞' }]} />

            <div className={styles.container}>
                <div className={styles.filterSection}>
                    <div className={styles.filterItem}>
                        <label>–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:</label>
                        <Select
                            value={chartType}
                            onChange={setChartType}
                            options={[
                                { value: 'popularity', label: '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –±–ª—é–¥' },
                                { value: 'countByDay', label: '–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥' },
                                { value: 'avgByDay', label: '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –∑–∞ –¥–µ–Ω—å' },
                                { value: 'byTime', label: '–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫' },
                                { value: 'pickupVsDelivery', label: '–î–æ—Å—Ç–∞–≤–∫–∞ / —Å–∞–º–æ–≤—ã–≤–æ–∑' },
                                { value: 'paymentMethod', label: '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã' },
                                { value: 'genderDistribution', label: '–ü–æ –ø–æ–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
                            ]}
                        />
                    </div>

                    <div className={styles.filterItem}>
                        <label>–ü–µ—Ä–∏–æ–¥:</label>
                        <DateRangePicker
                            startDate={dateRange.startDate}
                            endDate={dateRange.endDate}
                            onChange={setDateRange}
                        />
                    </div>
                </div>

                <div className={styles.chartWrapper}>
                    {loading ? (
                        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                    ) : chartData.length === 0 ? (
                        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                    ) : (
                        <ResponsiveContainer width="100%" height={500}>
                            {(() => {
                                switch (chartType) {
                                    case 'popularity':
                                    case 'countByDay':
                                    case 'avgByDay':
                                    case 'byTime':
                                    case 'byWeekday':
                                        return (
                                            <BarChart data={chartData}>
                                                <CartesianGrid strokeDasharray="3 3" />
                                                <XAxis
                                                    dataKey={
                                                        chartType === 'popularity'
                                                            ? 'name'
                                                            : chartType === 'byTime'
                                                                ? 'range'
                                                                : 'day'
                                                    }
                                                    tick={{ fontSize: 12 }}
                                                />
                                                <YAxis tick={{ fontSize: 12 }} />
                                                <Tooltip />
                                                <Bar
                                                    dataKey={chartType === 'avgByDay' ? 'avg' : 'count'}
                                                    fill="#8884d8"
                                                />
                                            </BarChart>
                                        );

                                    case 'pickupVsDelivery':
                                    case 'paymentMethod':
                                    case 'genderDistribution':
                                        return (
                                            <PieChart>
                                                <Pie
                                                    data={chartData}
                                                    cx="50%"
                                                    cy="50%"
                                                    labelLine={false}
                                                    label={({ name, percent }) =>
                                                        `${name}: ${(percent * 100).toFixed(0)}%`
                                                    }
                                                    outerRadius={150}
                                                    dataKey="value"
                                                >
                                                    {chartData.map((entry, index) => (
                                                        <Cell
                                                            key={`cell-${index}`}
                                                            fill={COLORS[index % COLORS.length]}
                                                        />
                                                    ))}
                                                </Pie>
                                                <Tooltip />
                                                <Legend />
                                            </PieChart>
                                        );

                                    default:
                                        return (
                                            <div style={{ textAlign: 'center', paddingTop: '100px' }}>
                                                <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                                            </div>
                                        );
                                }
                            })()}
                        </ResponsiveContainer>
                    )}
                </div>
            </div>
        </Layout>
    );
}
